# MRO https://habr.com/ru/post/62203/
#  Алгоритм С3 линеаризации
#  1.Каждый клас должен входить в список ровно 1 раз
#  2.Если какойто класс D наследуеться от класов допустим A,B,C(clas D(A,B,C)) в таком же порядке они и должны появляться
#  в MRO  D -> A - > B -> C...Между ними могут появляться и другие классы,но исходный порядок должен быть соблюден!
#  3.Родители данного класса должны появляться по порядку старшенстваюСначала идут родители,потом бабушки и дудушки!
class O:
    pass


class A(O):
    pass


class B(O):
    pass


class C(O):
    pass


class D(O):
    pass


class E(O):
    pass


class K1(C, A, B):
    pass


class K2(A, D):
    pass


class K3(B, D, E):
    pass


class Z(K1, K2, K3):
    pass


print(Z.__mro__)
print(Z.mro())


def get_mro(cls):
    """Возвращает нам список классов ровно в том порядке
    В котором Python будет искать методы в иерархии класса
    Пока не найдет нужный или не выдаст ошибку!"""
    print(*[c.__name__ for c in cls.mro()], sep=" -> ")


get_mro(Z)  # Z -> K1 -> C -> K2 -> A -> K3 -> B -> D -> E -> O -> object
